FORMAT: 1A

# Let's Eat API

*This API Blueprint is subject to change due to technology restrictions, performance optimizations or changing requirements.*

# Authentication

+ This API uses [JWT](http://jwt.io/) for authentication,
+ Every token MUST be refreshed before its expiration time,
+ Token MUST be provided in `Authorization` header,
+ Toke MUST be provided for each request that requires authentication,
+ This API issues a **long-lived access tokens** for consumers. A long-lived JWT generally SHOULD lasts about **30 days**. If no requests are made, the token MUST expire and the user MUST go through the login flow again to get a new one.

> A custom scheme strategy like "JWT" seems to be more appropriate than coercing the OAuth2 Bearer scheme.

### Example Header
```
Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJhNnZoQW8zRkc3dDEiLCJuYW1lIjoiSm9obiBEb2UiLCJpYXQiOjE0NzA1OTg5NzIsImV4cCI6MTQ3MDY4NTM3Mn0.ltA9zZmJKszBJuuV7pTWtY7LzLXrRUfebJDhy_jGMeM
```

### Claims

### Registered Claims

+ `exp` - The exp ( *expiration time* ) claim identifies the expiration time on or after which the JWT MUST NOT be accepted for processing.
+ `iat` - The iat ( *issued at* ) claim identifies the time at which the JWT was issued.

### Public Claims

+ `uuid` - The uuid ( *Universal Unique Indentifier* ) claim identifies the uuid of resource.
+ `email` - The email claim identifies the email of resource.

### Private Claims

+ `entity` - The entity claim identifies the type of the resource who requested the JWT.

## Filtering

### Filtering

This API can filter returned collections based on provided query parameters. Virtually any model field can be used as a filter (except sensible data)

For example, when requesting a list of movies from the /movies endpoint, you may want to limit these to only those of drama genre. This could be accomplished with a request like `GET /movies?genre=drama`. Here, genre is a query parameter that implements a filter.

Searchable list of fields are defined in data stuctures section

# HTTP Methods

This API uses HTTP verbs (methods) as following:

+ `GET` - *Read* - used to **read** (or retrieve) a representation of a resource,
+ `POST` - *Create* - used to **create** new resources. In particular, it's used to create subordinate resources.
+ `PATCH` - *Update/Modify* - used for **modify** capabilities. The PATCH request only needs to contain the changes to the resource, not the complete resource.

# Media Type

Where applicable this API MUST use the JSON media-type. Requests with a message-body are using plain JSON to set or update resource states.

`Content-type: application/json; charset=utf-8` and `Accept: application/json` headers SHOULD be set on all requests if not stated otherwise.

# Notational Conventions

The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in [RFC2119](https://www.ietf.org/rfc/rfc2119).

# Representation of Date and Time

All exchange of date and time-related data MUST be done according to [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) standard and stored in UTC.

When returning date and time-related data `YYYY-MM-DDThh:mm:ss.SSSZ` format MUST be used.

# Resource IDs

This API uses Universally Unique Identifier (UUID) compliant to [RFC4122](https://ietf.org/rfc/rfc4122).

#### Example
`2a64296d-0f87-4457-b9ed-cac36f20c587`

# Status Codes and Errors

This API uses HTTP status codes to communicate with the API consumer.

+ `200 OK` - Response to a successful GET, PUT, PATCH or DELETE.
+ `201 Created` - Response to a POST that results in a creation.
+ `204 No Content` - Response to a successful request that won't be returning a body (like a DELETE request).
+ `400 Bad Request` - Malformed request; form validation errors.
+ `401 Unauthorized` - When no or invalid authentication details are provided.
+ `403 Forbidden` - When authentication succeeded but authenticated user doesn't have access to the resource.
+ `404 Not Found` - When a non-existent resource is requested.

## Error response

This API returns both, machine-readable error codes and human-readable error messages in response body when an error is encountered.

#### Example

##### Generic Error

```js
{
    "statusCode": 403,
    "error": "Forbidden",
    "message": "Your account is suspended and is not permitted to access this feature",
}
```

# Group Stores

## Store Registration [/stores/register]
 
### Register a new Store [POST]

**Endpoint information**

| Requires authentication | Has restricted scope |
|-------------------------|----------------------|
| No                      | No                   |

+ Request (application/json; charset=utf-8)
    + Attributes
        + name: `Let's Eat` (string, required) - Name of the store.
        + email: `hello@letseat.co` (string, required) - Email of the store.
        + phoneNumber: `0134724336` (number, required) - Phone number of the store.
        + password: `f8e2cfacc6` (string, required) - Password of the store.
        + imageUrl: `https://some.cdn.com/img.png` (string, optional) - Main image URL of the store.

+ Response 201 (application/json; charset=utf-8)
    + Attributes (object)
        + data (object)
            (JWT)

## Store Login [/stores/login]

### Retrieve a Token [POST]

Allows to retrieve a valid JSON Web Token.

**Endpoint information**

| Requires authentication | Has restricted scope |
|-------------------------|----------------------|
| No                      | No                   |

+ Request (application/json; charset=utf-8)
    + Attributes
        + email: `hello@letseat.co` (string, required) - Email of the store.
        + password: `f8e2cfacc6` (string, required) - Password of the store.

+ Response 200 (application/json; charset=utf-8)
    + Attributes (object)
        + data (object)
            (JWT)

## Current Store Profile [/stores/me]

Current store MUST be identified by JWT provided in request header.

### Retrieve Profile of the current Store [GET]

Retrieves the profile of the current store.

**Endpoint information**

| Requires authentication | Has restricted scope |
| ----------------------- | -------------------- |
| Yes (JWT)               | No                   |

+ Request (application/json; charset=utf-8)
    + Headers

            Authorization: Bearer <JWT>

+ Response 200 (application/json; charset=utf-8)
  + Attributes (object)
      + data (object)
          (Store)

## Stores [/stores]

### List all Stores [GET]

Returns a list of stores. The stores are returned in sorter order, with the most recently created stores appearing first.

**Searcheable fields**
+ name
+ email
+ slug

**Endpoint information**

| Requires authentication | Has restricted scope |
|-------------------------|----------------------|
| No                      | No                   |

+ Request (application/json; charset=utf-8)

+ Response 200 (application/json; charset=utf-8)
    + Attributes (object)
        + data (array[Store])

## Store [/stores/{uuid}]

+ Parameters
    + uuid: `890df35b-3e94-4c68-9553-42976cfd5612` (string) - UUID of the store.

### Retrieve a Store [GET]

Retrieve the details of an existing Store.

**Endpoint information**

| Requires authentication | Has restricted scope |
|-------------------------|----------------------|
| No                      | No                   |

+ Request (application/json; charset=utf-8)

+ Response 200 (application/json; charset=utf-8)
    + Attributes (object)
        + data (object)
            (Store)

# Group Customers

## Customer Registration [/customers/register]

### Register a new Customer [POST]

**Endpoint information**

| Requires authentication | Has restricted scope |
|-------------------------|----------------------|
| No                      | No                   |

+ Request (application/json; charset=utf-8)
    + Attributes
        + firstName: `John` (string, required) - First name of the customer.
        + lastName: `Doe` (string, required) - Last name of the customer.
        + email: `john.doe@mail.com` (string, required) - Email of the customer.
        + phoneNumber: `0663451278` (number, required) - Phone number of the customer.
        + password: `RHN4uNu3` (string, required) - Password of the customer.

+ Response 201 (application/json; charset=utf-8)
    + Attributes (object)
        + data (object)
            (JWT)

## Customer Login [/customers/login]

### Retrieve a Token [POST]

Allows to retrieve a valid JSON Web Token.

**Endpoint information**

| Requires authentication | Has restricted scope |
|-------------------------|----------------------|
| No                      | No                   |

+ Request (application/json; charset=utf-8)
    + Attributes
        + email: `john.doe@mail.com` (string, required) - Email of the customer.
        + password: `RHN4uNu3` (string, required) - Password of the customer.

+ Response 200 (application/json; charset=utf-8)
    + Attributes (object)
            + data (object)
                (JWT)

## Customers [/customers]

API key MUST be provided in corresponding header.

### List all Customers [GET]

Returns a list of customers. The customers are returned in sorter order, with the most recently created stores appearing first.

**Endpoint information**

| Requires authentication | Has restricted scope |
|-------------------------|----------------------|
| Yes (API key)           | No                   |

Request (application/json; charset=utf-8)
    + Headers

            Lets-Eat-API-Key: <Lets-Eat-API-Key>

+ Response 200 (application/json; charset=utf-8)
    + Attributes (object)
        + data (array[Store])

## Customer [/customers/{uuid}]

API key MUST be provided in corresponding header.

+ Parameters
    + uuid: `890df35b-3e94-4c68-9553-42976cfd5612` (string) - UUID of the customer.

### Retrieve a Customer By his UUID [GET]

Retrieve the details of an existing Customer.

**Endpoint information**

| Requires authentication | Has restricted scope |
|-------------------------|----------------------|
| Yes (API Key)           | No                   |

 Request (application/json; charset=utf-8)
    + Headers

            Lets-Eat-API-Key: <Lets-Eat-API-Key>

+ Response 200 (application/json; charset=utf-8)
    + Attributes (object)
        + data (object)
            (Customer)

## Current Customer Profile [/customers/me]

Current store MUST be identified by JWT provided in request header.

### Retrieve Profile of the current Customer [GET]

Retrieves the profile of the current store.

**Endpoint information**

| Requires authentication | Has restricted scope |
| ----------------------- | -------------------- |
| Yes (JWT)               | No                   |

+ Request (application/json; charset=utf-8)
    + Headers

            Authorization: Bearer <JWT>

+ Response 200 (application/json; charset=utf-8)
    + Attributes (object)
        + data (object)
            (Customer)

### Update Profile of the current Customer [PATCH]

Update informations of the current Customer.

**Endpoint information**

| Requires authentication | Has restricted scope |
| ----------------------- | -------------------- |
| Yes (JWT)               | No                   |

+ Request (application/json; charset=utf-8)
    + Headers

            Authorization: Bearer <JWT>
    + Attributes
       + firstName: `Joe` (string, optional) - New first name.
       + lastName: `Poe` (string, optional) - New last name.
       + email: `joe.poe@mail.com` (string, optional) - New email.
       + phoneNumber: `0789211234` (number, optional) - New phone number

+ Response 204

### Delete Profile of the current Customer [PATCH]

Delete informations of the current Customer.

**Endpoint information**

| Requires authentication | Has restricted scope |
| ----------------------- | -------------------- |
| Yes (JWT)               | No                   |

+ Request (application/json; charset=utf-8)
    + Headers

            Authorization: Bearer <JWT>
    
+ Response 204

## Data Structures

### Resource (object)
+ id: `1` (string, fixed) - Auto-incremented resource identifier.
+ uuid: `2a64296d-0f87-4457-b9ed-cac36f20c587` (string, fixed) - Universal Unique Identifier.
+ createdAt: `2018-07-01T15:11:09.553Z` (string, optional) - ISO Date/time string. When this resource was created.
+ updatedAt: `2018-07-01T15:11:09.553Z` (string, optional) - ISO Date/time string. When this resource was last updated.

### Store (Resource)
+ name: `Let's Eat` (string, required) - Name of the store.
+ email: `hello@letseat.co` (string, required) - Email of the store.
+ phoneNumber: `0134724336` (number, required) - Phone number of the store.
+ slug: `lets-eat-7d6ae7c69f` (string, required) - Slug of the store.
+ password: `f8e2cfacc6` (string, required) - Password of the store.
+ imageUrl: `https://some.cdn.com/img.png` (string, optional) - Main image URL of the store.

### Customer (Resource)
+ firstName: `John` (string, required) - First name of the customer.
+ lastName: `Doe` (string, required) - Last name of the customer.
+ email: `john.doe@mail.com` (string, required) - Email of the customer.
+ phoneNumber: `0663451278` (number, required) - Phone number of the customer.
+ password: `RHN4uNu3` (string, required) - Password of the customer.

### JWT (object)
+ iat: `1538414646426` (number, required) - Issued date of the JSON Web Token in Unix timestamp format 
+ exp: `1539019446426` (number, required) - Expiration date of the JSON Web Token in Unix timestamp format 
+ jwt: `eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJhNnZoQW8zRkc3dDEiLCJuYW1lIjoiSm9obiBEb2UiLCJpYXQiOjE0NzA1OTg5NzIsImV4cCI6MTQ3MDY4NTM3Mn0.ltA9zZmJKszBJuuV7pTWtY7LzLXrRUfebJDhy_jGMeM` (string, required) - JSON Web Token
