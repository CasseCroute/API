defaults: &defaults
  docker:
    - image: circleci/node:10.6
      environment:
        NODE_ENV: test
        CI: true
    - image: circleci/postgres:10.5-alpine-postgis
      environment:
        POSTGRES_USER: postgres
        POSTGRES_DB: test_letseat
    - image: circleci/redis:latest
  working_directory:  ~/letseat/api

version: 2

jobs:
  build:
    <<: *defaults
    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "package.json" }}
           - v1-dependencies-{{ checksum "yarn.lock" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-

      - run:
          name: Install packages
          command: yarn install

      - save_cache:
          paths:
            - node_modules
          key: v1-dependencies-{{ checksum "package.json" }}

  test:static:
    <<: *defaults

    steps:
      - checkout

      - run:
          name: Install packages
          command: yarn install

      - run:
          name: Install TypeScript & TSLint gloabally
          command: yarn global add tslint typescript

      - run:
          name: Static code analysis with TypeScript + SonarQube
          command: yarn test:static

      - store_test_results:
          path: /tmp/test-results
      - store_artifacts:
          path: /tmp/test-results
          destination: test-results

  test:unit:
    <<: *defaults

    steps:
      - checkout

      - run:
          name: Install packages
          command: yarn install
      - run:
          name: Setup Code Climate test-reporter
          command: |
            curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
            chmod +x ./cc-test-reporter

      - run:
          name: Install Jest gloabally
          command: yarn global add jest

      - run:
          name: Code coverage unit testing with Jest
          command: |
            ./cc-test-reporter before-build
             yarn test:unit:cov

      - run:
          name: Report code coverage
          command:  |
            ./cc-test-reporter format-coverage src/coverage/lcov.info --input-type lcov
            ./cc-test-reporter upload-coverage

          environment:
            JEST_JUNIT_OUTPUT: "coverage/junit/js-test-results.xml"

      - store_test_results:
          path: /coverage/junit
      - store_artifacts:
          path: /coverage

  test:api:
    <<: *defaults

    steps:
      - checkout

      - run:
          name: Install packages
          command: yarn install

      - run:
          name: Install Postgres Client
          command: |
            sudo apt-get update
            sudo apt-get install postgresql-client

      - run:
          name: Install Redis-CLI
          command: |
            sudo apt-get update && sudo apt-get install -y redis-tools
            echo "CONFIG SET save ''" | redis-cli -x

      - run:
          name: Install TypeScript & Dredd
          command: yarn global add typescript dredd

      - run:
          name: Install Dockerize
          command: wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && sudo tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
          environment:
            DOCKERIZE_VERSION: v0.3.0

      - run:
          name: Dockerize Postgresql
          command: dockerize -wait tcp://localhost:5432 -timeout 1m

      - run:
          name: Dockerize Redis
          command: dockerize -wait tcp://localhost:6379 -timeout 1m

      - run:
          name: Generate API Key
          command: redis-cli HSET $REDIS_API_KEY_HASHMAP $LETS_EAT_API_KEY ""

      - run:
          name: Test API with Dredd
          command: yarn test:api

  analyze:dependencies:
    <<: *defaults
    steps:
      - checkout
      - run:
          name: Install FOSSA CLI
          command: |
            curl -H 'Cache-Control: no-cache' https://raw.githubusercontent.com/fossas/fossa-cli/master/install.sh | bash

      - run:
          name: Dependencies analysis with FOSSA
          command: |
            fossa init
            FOSSA_API_KEY=$FOSSA_API_KEY fossa

workflows:
  version: 2
  build-and-test:
      jobs:
        - build:
            filters:
              branches:
                ignore: master
        - test:unit:
            requires:
              - build
        - test:static:
            requires:
              - build
        - test:api:
            requires:
              - build
        - analyze:dependencies:
            requires:
              - build
